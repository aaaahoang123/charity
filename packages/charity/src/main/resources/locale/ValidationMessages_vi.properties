jakarta.validation.constraints.AssertFalse.message     = ph\u1EA3i l\u00E0 false
jakarta.validation.constraints.AssertTrue.message      = ph\u1EA3i l\u00E0 true
jakarta.validation.constraints.DecimalMax.message      = ph\u1EA3i nh\u1ECF h\u01A1n ${inclusive == true ? 'ho\u1EB7c b\u1EB1ng ' : ''}{value}
jakarta.validation.constraints.DecimalMin.message      = ph\u1EA3i l\u1EDBn h\u01A1n ${inclusive == true ? 'ho\u1EB7c b\u1EB1ng ' : ''}{value}
jakarta.validation.constraints.Digits.message          = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
jakarta.validation.constraints.Email.message           = ph\u1EA3i \u0111\u00FAng \u0111\u1ECBnh d\u1EA1ng email
jakarta.validation.constraints.Future.message          = ph\u1EA3i l\u00E0 th\u1EDDi \u0111i\u1EC3m t\u01B0\u01A1ng lai
jakarta.validation.constraints.FutureOrPresent.message = ph\u1EA3i l\u00E0 hi\u1EC7n t\u1EA1i ho\u1EB7c t\u01B0\u01A1ng lai
jakarta.validation.constraints.Max.message             = ph\u1EA3i nh\u1ECF h\u01A1n ho\u1EB7c b\u1EB1ng {value}
jakarta.validation.constraints.Min.message             = ph\u1EA3i l\u1EDBn h\u01A1n ho\u1EB7c b\u1EB1ng {value}
jakarta.validation.constraints.Negative.message        = ph\u1EA3i l\u00E0 s\u1ED1 \u00E2m
jakarta.validation.constraints.NegativeOrZero.message  = ph\u1EA3i nh\u1ECF h\u01A1n ho\u1EB7c b\u1EB1ng 0
jakarta.validation.constraints.NotBlank.message        = kh\u00F4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng
jakarta.validation.constraints.NotEmpty.message        = kh\u00F4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng
jakarta.validation.constraints.NotNull.message         = kh\u00F4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng
jakarta.validation.constraints.Null.message            = ph\u1EA3i l\u00E0 null
jakarta.validation.constraints.Past.message            = ph\u1EA3i l\u00E0 qu\u00E1 kh\u1EE9
jakarta.validation.constraints.PastOrPresent.message   = ph\u1EA3i l\u00E0 qu\u00E1 kh\u1EE9 ho\u1EB7c hi\u1EC7n t\u1EA1i
jakarta.validation.constraints.Pattern.message         = ph\u1EA3i kh\u1EDBp m\u1EABu "{regexp}"
jakarta.validation.constraints.Positive.message        = ph\u1EA3i l\u00E0 s\u1ED1 d\u01B0\u01A1ng
jakarta.validation.constraints.PositiveOrZero.message  = ph\u1EA3i l\u1EDBn h\u01A1n ho\u1EB7c b\u1EB1ng 0
jakarta.validation.constraints.Size.message            = ph\u1EA3i c\u00F3 c\u1EE1 trong kho\u1EA3ng {min} t\u1EDBi {max}

org.hibernate.validator.constraints.CreditCardNumber.message        = s\u1ED1 th\u1EBB t\u00EDn d\u1EE5ng kh\u00F4ng h\u1EE3p l\u1EC7
org.hibernate.validator.constraints.Currency.message                = ti\u1EC1n t\u1EC7 kh\u00F4ng h\u1EE3p l\u1EC7 (ch\u1EA5p nh\u1EADp {value})
org.hibernate.validator.constraints.EAN.message                     = kh\u00F4ng ph\u1EA3i {type} barcode
org.hibernate.validator.constraints.Email.message                   = kh\u00F4ng ph\u1EA3i l\u00E0 email h\u1EE3p l\u1EC7
org.hibernate.validator.constraints.ISBN.message                    = ISBN kh\u00F4ng h\u1EE3p l\u1EC7
org.hibernate.validator.constraints.Length.message                  = ph\u1EA3i c\u00F3 \u0111\u1ED9 d\u00E0i trong kho\u1EA3ng {min} t\u1EDBi {max}
org.hibernate.validator.constraints.CodePointLength.message         = ph\u1EA3i c\u00F3 \u0111\u1ED9 d\u00E0i trong kho\u1EA3ng {min} t\u1EDBi {max}
org.hibernate.validator.constraints.LuhnCheck.message               = the check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message              = the check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message              = the check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message                = the check digit for ${validatedValue} is invalid, {modType} checksum failed
org.hibernate.validator.constraints.Normalized.message              = must be normalized
org.hibernate.validator.constraints.NotBlank.message                = kh\u00F4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng
org.hibernate.validator.constraints.NotEmpty.message                = kh\u00F4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng
org.hibernate.validator.constraints.ParametersScriptAssert.message  = bi\u1EC3u th\u1EE9c script "{script}" kh\u00F4ng h\u1EE3p l\u1EC7
org.hibernate.validator.constraints.Range.message                   = ph\u1EA3i trong kho\u1EA3ng {min} t\u1EDBi {max}
org.hibernate.validator.constraints.ScriptAssert.message            = bi\u1EC3u th\u1EE9c script "{script}" kh\u00F4ng h\u1EE3p l\u1EC7
org.hibernate.validator.constraints.UniqueElements.message          = ch\u1EC9 c\u00F3 th\u1EC3 ch\u1EE9a thu\u1ED9c t\u00EDnh unique
org.hibernate.validator.constraints.URL.message                     = kh\u00F4ng ph\u1EA3i url h\u1EE3p l\u1EC7
org.hibernate.validator.constraints.UUID.message                     = ph?i l� UUID h?p l?

org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
org.hibernate.validator.constraints.br.CPF.message                  = invalid Brazilian individual taxpayer registry number (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.message      = invalid Brazilian Voter ID card number

org.hibernate.validator.constraints.pl.REGON.message                = invalid Polish Taxpayer Identification Number (REGON)
org.hibernate.validator.constraints.pl.NIP.message                  = invalid VAT Identification Number (NIP)
org.hibernate.validator.constraints.pl.PESEL.message                = invalid Polish National Identification Number (PESEL)

org.hibernate.validator.constraints.ru.INN.message                  = invalid Russian taxpayer identification number (INN)

org.hibernate.validator.constraints.time.DurationMax.message        = ph\u1EA3i ng\u1EAFn h\u01A1n ${inclusive == true ? 'ho\u1EB7c b\u1EB1ng ' : ''} ${days == 0 ? '' : days == 1 ? ' 1 ng\u00E0y' : ' ' += days += ' ng\u00E0y'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message        = must be longer than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}

targetAmount=Số tiền quyên góp